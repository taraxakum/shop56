<?php

/**
 * @file
 * Contains commerce_pos_reports.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\commerce_price\Entity\Currency;
use Drupal\commerce_pos\Entity\Register;
use Drupal\commerce_store\Entity\Store;
use Drupal\user\Entity\User;

const COMMERCE_POS_PAYMENT_STATUS_SUCCESS = 'completed';

/**
 * Implements hook_help().
 */
function commerce_pos_reports_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the commerce_pos_reports module.
    case 'help.page.commerce_pos_reports':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides reporting functionality for Commerce POS') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_theme().
 */
function commerce_pos_reports_theme($existing, $type, $theme, $path) {
  \Drupal::moduleHandler()
    ->loadInclude('commerce_pos_reports', 'inc', 'commerce_pos_reports.theme');

  $hooks['commerce_pos_reports_end_of_day_result_table'] = [
    'file' => 'commerce_pos_reports.theme.inc',
    'render element' => 'form',
  ];

  $hooks['commerce_pos_reports_receipt'] = [
    'variables' => [
      'date' => NULL,
      'register' => NULL,
    ],
    'file' => 'commerce_pos_reports.theme.inc',
  ];

  return $hooks;
}

/**
 * Prepares an array of JavaScript settings.
 *
 * Contains instructions on how to format currencies via a JavaScript function
 * call.
 *
 * @param array $currencies
 *   An array of currency codes to provide formatting settings for.
 *
 * @return array
 *   Formatting settings for any requested currencies, key'd by currency code.
 */
function commerce_pos_reports_currency_js(array $currencies) {
  $settings = [];

  foreach ($currencies as $currency_code) {
    /** @var \Drupal\commerce_price\Entity\Currency $currency */
    $currency = Currency::load($currency_code);

    // @TODO: Figure out what the actual divisor, symbol placements are.
    $currency_array = [];
    $currency_array['symbol'] = $currency->getSymbol();
    $currency_array['code'] = $currency->getCurrencyCode();
    $currency_array['symbol_placement'] = 'before';
    $currency_array['symbol_spacer'] = '';
    $currency_array['code_spacer'] = '';
    $currency_array['decimals'] = $currency->getFractionDigits();
    $currency_array['rounding_step'] = 0;
    $settings[$currency_code]['currency'] = $currency_array;
    $settings[$currency_code]['divisor'] = 100;
  }

  return $settings;
}

/**
 * Loads the EOD report for a specific register and date.
 *
 * @param string $date
 *   A strtotime compatible date, will search this date exactly.
 * @param int $register_id
 *   Id of the register to load the report for.
 *
 * @return array
 *   Report metainfo and data.
 */
function commerce_pos_reports_get_eod_report($date, $register_id) {
  $time = strtotime($date);

  $query = \Drupal::database();
  $result = $query->select('commerce_pos_report_declared_data', 't')
    ->fields('t')
    ->condition('register_id', $register_id)
    ->condition('date', $time, '=')
    ->execute();

  $report = $result->fetchAssoc();

  if (!empty($report)) {
    $report['data'] = unserialize($report['data']);
    $report['closed'] = TRUE;
    return $report;
  }

  return NULL;
}

/**
 * Get the reports for the specified day of a single register.
 *
 * @param string $date_filter
 *   The date range to filter by in compatible strtotime format.
 *   Will search this time +1day.
 * @param int $register_id
 *   The id of the register to get totals for.
 * @param array $pos_methods
 *   The payment gateway labels keyed by ID.
 *
 * @return array
 *   Total, Count and Summary
 */
function commerce_pos_reports_get_totals($date_filter, $register_id, array $pos_methods) {
  $query = \Drupal::database();
  $query = $query->select('commerce_order', 'o');
  $query->condition('o.type', 'pos');

  $query->fields('o');

  $query->fields('pt', [
    'amount__number',
    'amount__currency_code',
    'payment_gateway',
    'state',
  ]);

  $query->join('commerce_payment', 'pt', 'pt.order_id = o.order_id');

  // Date filter.
  if ($date_filter) {
    $date_timestamp = strtotime($date_filter);
    $query->condition('o.completed', $date_timestamp, '>=');
    $query->condition('o.completed', strtotime('+1 day', $date_timestamp), '<');
  }

  // Register ID filter.
  if ($register_id) {
    $query->join('commerce_order__field_register', 'r', 'r.entity_id = o.order_id');
    $query->condition('r.field_register_target_id', $register_id);
  }

  // Get the cashier that ringed up the order.
  $query->join('commerce_order__field_cashier', 'c', 'c.entity_id = o.order_id');
  $query->fields('c', ['field_cashier_target_id']);

  $query->orderBy('o.order_id');

  $totals = [];
  $transaction_counts = [];
  $transaction_summary = [];

  // Default to a single currency based off of the default store currency.
  /** @var \Drupal\commerce_pos\Entity\Register $register */
  $register = Register::load($register_id);
  /** @var \Drupal\commerce_store\Entity\Store $store */
  $store = Store::load($register->getStoreId());
  $currency_code = $store->getDefaultCurrencyCode();

  foreach ($pos_methods as $id => $pos_method_name) {
    $totals[$currency_code][$id] = 0;

    $transaction_summary[$id] = [];
    $transaction_counts[$id] = 0;
  }

  $currency_formatter = \Drupal::service('commerce_price.currency_formatter');

  foreach ($query->execute() as $row) {
    if (!isset($totals[$row->total_price__currency_code][$row->payment_gateway])) {
      continue;
    }

    if ($row->state == COMMERCE_POS_PAYMENT_STATUS_SUCCESS) {
      $method = &$totals[$row->total_price__currency_code][$row->payment_gateway];
      $method += $row->amount__number;
    }

    if (!isset($transaction_counts[$row->payment_gateway])) {
      $transaction_counts[$row->payment_gateway] = 0;
    }

    $transaction_counts[$row->payment_gateway]++;

    if (!isset($transaction_summary[$row->payment_gateway])) {
      $transaction_summary[$row->payment_gateway] = [];
    }

    if (!empty($row->field_cashier_target_id) && $cashier = User::load($row->field_cashier_target_id)) {
      $cashier_name = $cashier->getUsername();
    }
    else {
      $cashier_name = t('Unknown');
    }

    $transaction_summary[$row->payment_gateway][] = [
      'order_id' => $row->order_id,
      'completed' => $row->completed,
      'completed_date_formatted' => date('g:i:s a', $row->completed),
      'cashier' => $cashier_name,
      'amount' => $row->amount__number,
      'amount_currency_formatted' => $currency_formatter->format((string) $row->amount__number, $row->total_price__currency_code),
      'status' => 'completed',
    ];
  }

  return [$totals, $transaction_counts, $transaction_summary];
}

/**
 * Get the available payment options. @see CommercePOSSettingsForm.
 *
 * @param string $date
 *   The date in string format to filter against.
 *
 * @return array
 *   The payment gateway labels keyed by ID.
 */
function commerce_pos_reports_get_payment_gateway_options($date) {
  // Search orders for specified  day only.
  $start_time = strtotime($date);
  $end_time = strtotime('+1 day', $start_time);

  // Get the payment gateways for pos orders on this day.
  $query = \Drupal::database();
  $query = $query->select('commerce_payment', 'cp')->fields('cp', ['payment_gateway']);
  $query->leftJoin('commerce_order', 'co', 'cp.order_id = co.order_id');
  $query->condition('co.type', 'pos');
  $query->condition('created', $start_time, '>=');
  $query->condition('created', $end_time, '<');
  $results = $query->execute()->fetchCol();

  /** @var \Drupal\commerce_payment\Entity\PaymentGatewayInterface[] $payment_gateway_entities */
  $payment_gateway_entities = \Drupal::service('entity_type.manager')->getStorage('commerce_payment_gateway')->loadMultiple($results);
  $payment_gateways = [];

  foreach ($payment_gateway_entities as $payment_gateway_entity) {
    $payment_gateways[$payment_gateway_entity->id()] = $payment_gateway_entity->label();
  }

  ksort($payment_gateways);
  return $payment_gateways;
}
