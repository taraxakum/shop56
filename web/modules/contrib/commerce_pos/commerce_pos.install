<?php

/**
 * @file
 * Install, update and uninstall functions for the commerce_pos module.
 */

use Drupal\Core\Config\FileStorage;
use Drupal\Core\Field\BaseFieldDefinition;
use Drupal\user\Entity\Role;

/**
 * Implements hook_schema().
 */
function commerce_pos_schema() {
  $schema['commerce_pos_float'] = [
    'description' => 'Stores register floats.',
    'fields' => [
      'float_id' => [
        'description' => 'Primary Key: Float ID.',
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'register_id' => [
        'description' => 'The {commerce_pos_register}.register_id',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 0,
      ],
      'amount' => [
        'description' => 'The amount of the float.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'default' => 100,
      ],
    ],
    'primary key' => ['float_id'],
    'indexes' => [
      'register_id' => ['register_id'],
    ],
    'foreign keys' => [
      'register_id' => ['commerce_pos' => 'register_id'],
    ],
  ];

  return $schema;
}

/**
 * Install the 'commerce_pos_float' table schema.
 */
function commerce_pos_update_8201() {
  drupal_install_schema('commerce_pos');
}

/**
 * Update the register entity's fields.
 *
 * Removes cash and adds open, opening float and default float.
 */
function commerce_pos_update_8202() {
  $definition_update_manager = \Drupal::entityDefinitionUpdateManager();

  if ($definition_update_manager->getEntityType('commerce_pos_register')) {
    // Remove the no longer used 'float' field.
    $storage_definition = $definition_update_manager->getFieldStorageDefinition('float', 'commerce_pos_register');
    if ($storage_definition) {
      $definition_update_manager->uninstallFieldStorageDefinition($storage_definition);
    }
  }

  $storage_definition = BaseFieldDefinition::create('boolean')
    ->setLabel(t('Open'))
    ->setDescription(t('If this register is open or closed.'))
    ->setDefaultValue(0)
    ->setDisplayOptions('view', [
      'type' => 'boolean_checkbox',
      'weight' => 2,
      'disabled' => TRUE,
    ])
    ->setDisplayConfigurable('view', TRUE)
    ->setDisplayConfigurable('form', FALSE);

  $definition_update_manager->installFieldStorageDefinition('open', 'commerce_pos_register', 'commerce_pos_register', $storage_definition);

  $storage_definition = BaseFieldDefinition::create('commerce_price')
    ->setLabel(t('Opening Float'))
    ->setDescription(t('The float amount when this register was opened.'))
    ->setRequired(FALSE)
    ->setDefaultValue(0)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'commerce_price_default',
      'weight' => 3,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', FALSE);

  $definition_update_manager->installFieldStorageDefinition('opening_float', 'commerce_pos_register', 'commerce_pos_register', $storage_definition);

  // Some sort of currency or price field maybe?
  $storage_definition = BaseFieldDefinition::create('commerce_price')
    ->setLabel(t('Default Float'))
    ->setDescription(t('The float to recommend when opening this register.'))
    ->setRequired(TRUE)
    ->setDefaultValue(0)
    ->setDisplayOptions('view', [
      'label' => 'above',
      'type' => 'commerce_price_default',
      'weight' => 4,
    ])
    ->setDisplayOptions('form', [
      'type' => 'commerce_price_default',
      'weight' => 4,
    ])
    ->setDisplayConfigurable('form', TRUE)
    ->setDisplayConfigurable('view', TRUE);

  $definition_update_manager->installFieldStorageDefinition('default_float', 'commerce_pos_register', 'commerce_pos_register', $storage_definition);
}

/**
 * Install new return configs that are required.
 */
function commerce_pos_update_8203() {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $module_handler = Drupal::service('module_handler');
  $path = $module_handler->getModule('commerce_pos')->getPath();

  $source = new FileStorage($path . '/config/install');

  $active_storage->write('commerce_order.commerce_order_item_type.return', $source->read('commerce_order.commerce_order_item_type.return'));
  $active_storage->write('core.entity_view_display.commerce_order_item.return.default', $source->read('core.entity_view_display.commerce_order_item.return.default'));
}

/**
 * Install updated configs that are required.
 */
function commerce_pos_update_8204() {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $module_handler = Drupal::service('module_handler');
  $path = $module_handler->getModule('commerce_pos')->getPath();

  $source = new FileStorage($path . '/config/install');

  $active_storage->write('core.entity_form_display.commerce_order.pos.default', $source->read('core.entity_form_display.commerce_order.pos.default'));
}

/**
 * Install updated configs that are required.
 */
function commerce_pos_update_8205() {
  /** @var \Drupal\Core\Config\StorageInterface $active_storage */
  $active_storage = \Drupal::service('config.storage');

  $module_handler = Drupal::service('module_handler');
  $path = $module_handler->getModule('commerce_pos')->getPath();

  $source = new FileStorage($path . '/config/install');

  $active_storage->write('field.storage.commerce_order.field_register', $source->read('field.storage.commerce_order.field_register'));
}

/**
 * Enabling commerce_pos_print module.
 */
function commerce_pos_update_8206() {
  \Drupal::service('module_installer')->install(['commerce_pos_print']);
}

/**
 * Allow cashiers to change registers.
 */
function commerce_pos_update_8207() {
  /** @var \Drupal\user\Entity\Role $cashier_role */
  $cashier_role = Role::load('pos_cashier');
  if ($cashier_role) {
    $cashier_role->grantPermission('change commerce pos active register');
    $cashier_role->save();
  }
}

/**
 * Update Customer Widget placeholder value.
 */
function commerce_pos_update_8208() {
  $config_factory = \Drupal::configFactory();
  $config = $config_factory->getEditable('core.entity_form_display.commerce_order.pos.default');
  $config->set('content.uid.settings.placeholder', 'Enter a name, email, or phone number');
  $config->save(TRUE);
}
